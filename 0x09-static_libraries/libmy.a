!<arch>
0-isupper.c/    0           0     0     644     235       `
#include "main.h"

/**
 * _isupper - Checks for uppercase character
 * @c: character to be checked
 *
 * Return: 1 if c is uppercase. Otherwise 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     362       `
#include "main.h"

/**
 * _memset - the function fills memory with a constant byte
 * @s: pointer to variable n
 * @b: value to be filled
 * @n: number of bytes to be filled starting from s
 *
 * Return: a pointer to the memory area of variable s
 */
char *_memset(char *s, char b, unsigned int n)
{
	char *p = s;

	while (n--)
	{
		*p++ = b;
	}

	return (s);
}
0-putchar.c/    0           0     0     644     259       `
#include "main.h"

/**
 * main - Entry point
 *
 * Return: Always succes at 0
 */
int main(void)
{
	_putchar('_');
	_putchar('p');
	_putchar('u');
	_putchar('t');
	_putchar('c');
	_putchar('h');
	_putchar('a');
	_putchar('r');
	_putchar('\n');
	return (0);
}

0-strcat.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _strcat - concatenates 2 strings
 * @dest: first string
 * @src: second string
 * Return: the concatenated string
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	j = 0;
	while (dest[i++])
		j++;

	for (i = 0; src[i]; i++)
		dest[j++] = src[i];

	return (dest);
}
1-isdigit.c/    0           0     0     644     232       `
#include "main.h"

/**
 * _isdigit - Checks for a digit( 0 through 9)
 * @c: character to be checked
 * Return: 1 if c is a digit. 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     378       `
#include "main.h"

/**
 * _memcpy - this function copies memory area
 * @dest: pointer to destination object
 * @src: pointer to source object
 * @n: number of bytes to copy
 * Return: returns a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *p = dest;
	char *pSource = src;

	while (n)
	{
		*(p++) = *(pSource++);
		--n;
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     388       `
#include "main.h"

/**
 * _strncat - concatenates 2 strings using at most n bytes
 * @dest: the first string
 * @src: the second string
 * @n: number of bytes to be used
 * Return: concatenated string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	j = 0;
	while (dest[i++])
		j++;

	for (i = 0; src[i] && i < n; i++)
		dest[j++] = src[i];

	return (dest);
}
100-atoi.c/     0           0     0     644     382       `
#include "main.h"

/**
 * _atoi - convert string to integer
 * @s: the string to be converted
 * Return: the value of the string converted
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
2-strchr.c/     0           0     0     644     364       `
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 * @s: string to be searched
 * @c: character to be searched for
 * Return: a pointer to the first occurrence of the character in the string
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     228       `
#include "main.h"

/**
 * _strlen - returns the lenght of a string
 * @s: pointer with the address value
 * Return: length of string
 */
int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
		i++;
		s++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     376       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: first string
 * @src: second string
 * @n: number of bytes
 * Return: copied strings
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	j = 0;
	while (src[i++])
		j++;

	for (i = 0; src[i] && i < n; i++)
		dest[i] = src[i];

	for (i = j; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     237       `
#include "main.h"

/**
 * _islower - checks for lowercase characters
 * @c: character received from main
 * Return: 1 if c is lowercase
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     207       `
#include "main.h"

/**
 * _puts - prints string to stdout
 * @str: pointer with string value
 * Return: nothing
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     238       `
#include "main.h"

/**
 * _strcmp - compares 2 strings
 * @s1: first string
 * @s2: second string
 * Return: 1, 0 or -1
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     477       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix string
 * @s: first parameter in the function
 * @accept: second parameter in the function
 * Return: an unsigned integer
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				bytes++;
				break;
			}
			else if (accept[i + 1] == '\0')
			{
				return (bytes);
			}
		}

		s++;
	}

	return (bytes);
}

4-isalpha.c/    0           0     0     644     295       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: character recieved from main
 * Return: 1 if character is lowercase or uppercase alphabet
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

4-strpbrk.c/    0           0     0     644     459       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: string to be searched.
 * @accept: the set of bytes to be searched for.
 * Return: a pointer to the byte in @s that matches one of
 * the bytes in @accept. Otherwise NULL if no match.
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}

		s++;
	}

	return ('\0');
}

5-strstr.c/     0           0     0     644     552       `
#include "main.h"

/**
 * _strstr - this function locates a substring.
 * @haystack: string to be searched.
 * @needle: substring to be located.
 * Return: A pointer to the start of the substring
 * if located. Otherwise NULL.
 */
char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
	{
		return (haystack);
	}

	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			do {
				if (needle[i + 1] == '\0')
					return (haystack);

				i++;
			} while (haystack[i] == needle[i]);
		}
		haystack++;
	}
	return ('\0');
}
6-abs.c/        0           0     0     644     217       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: the integer
 * Return: n if positive. -n otherwise
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	else
	{
		return (-n);
	}
}

9-strcpy.c/     0           0     0     644     306       `
#include "main.h"

/**
 * _strcpy - copies string
 * @dest:variable  to copy string to
 * @src: source to copy to
 * Return: a pointer
 */
char *_strcpy(char *dest, const char *src)
{
	int index = 0;

	while (src[index])
	{
		dest[index] = src[index];
		index++;
	}
	dest[index] = '\0';

	return (dest);
}
